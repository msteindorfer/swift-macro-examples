import RegexBuilder
import SwiftSyntax
import SwiftSyntaxBuilder
import SwiftSyntaxMacros
import MacroExamplesPlugin
import XCTest

var testMacros: [String: Macro.Type] = [
  "stringify" : StringifyMacro.self,
  "regex" : RegexMacro.self,
]

final class MacroExamplesPluginTests: XCTestCase {
  func testStringify() {
    let sf: SourceFileSyntax =
      #"""
      let a = #stringify(x + y)
      let b = #stringify("Hello, \(name)")
      """#
    let context = BasicMacroExpansionContext.init(
      sourceFiles: [sf: .init(moduleName: "MyModule", fullFilePath: "test.swift")]
    )
    let transformedSF = sf.expand(macros: testMacros, in: context)
    XCTAssertEqual(
      transformedSF.description,
      #"""
      let a = (x + y, "x + y")
      let b = ("Hello, \(name)", #""Hello, \(name)""#)
      """#
    )
  }

  func testRegexPatternEmbeddingInvalidRegularExpressionSyntax() {
    let sf: SourceFileSyntax =
      """
      #regex("? invalid regular expression syntax ?")
      """
    var context = MacroExpansionContext(
      moduleName: "MyModule", fileName: "test.swift"
    )
    let transformedSF = sf.expand(macros: testMacros, in: &context)
    XCTAssertEqual(
      transformedSF.description,
      """
      Regex("? invalid regular expression syntax ?")
      """
    )
  }

  func testRegexPatternEmbeddingWithOneQuantification() {
    let sf: SourceFileSyntax =
      """
      #regex("\\w+")
      """
    var context = MacroExpansionContext(
      moduleName: "MyModule", fileName: "test.swift"
    )
    let transformedSF = sf.expand(macros: testMacros, in: &context)
    XCTAssertEqual(
      transformedSF.description,
//      """
//      Regex<Substring>(instructions: [
//        0x1500000000000000, // > [0] beginCapture 0
//        0x1400002008040008, // > [1] quantify builtin 1 unbounded
//        0x1600000000000000, // > [2] endCapture 0
//        0x1A00000000000000, // > [3] accept
//      ] as [UInt64])
//      """
      """
      Regex<Substring>(code: [
        0x7B, 0x22, 0x69, 0x6E, 0x73, 0x74, 0x72, 0x75,
        0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x22, 0x3A,
        0x5B, 0x31, 0x35, 0x31, 0x33, 0x32, 0x30, 0x39,
        0x34, 0x37, 0x34, 0x37, 0x39, 0x36, 0x34, 0x38,
        0x36, 0x36, 0x35, 0x36, 0x2C, 0x31, 0x34, 0x34,
        0x31, 0x31, 0x35, 0x32, 0x30, 0x31, 0x38, 0x33,
        0x33, 0x31, 0x39, 0x39, 0x32, 0x30, 0x37, 0x32,
        0x2C, 0x31, 0x35, 0x38, 0x35, 0x32, 0x36, 0x37,
        0x30, 0x36, 0x38, 0x38, 0x33, 0x34, 0x34, 0x31,
        0x34, 0x35, 0x39, 0x32, 0x2C, 0x31, 0x38, 0x37,
        0x33, 0x34, 0x39, 0x37, 0x34, 0x34, 0x34, 0x39,
        0x38, 0x36, 0x31, 0x32, 0x36, 0x33, 0x33, 0x36,
        0x5D, 0x7D,
      ])
      """
    )
  }

  func testRegexDslEmbeddingWithOneQuantification() {
    let sf: SourceFileSyntax =
      """
      #regex {
        OneOrMore(.word)
      }
      """
    var context = MacroExpansionContext(
      moduleName: "MyModule", fileName: "test.swift"
    )
    let transformedSF = sf.expand(macros: testMacros, in: &context)
    XCTAssertEqual(
      transformedSF.description,
//      """
//      Regex<Substring>(instructions: [
//        0x1500000000000000, // > [0] beginCapture 0
//        0x1400002008040008, // > [1] quantify builtin 1 unbounded
//        0x1600000000000000, // > [2] endCapture 0
//        0x1A00000000000000, // > [3] accept
//      ] as [UInt64])
//      """
      """
      Regex<Substring>(code: [
        0x7B, 0x22, 0x69, 0x6E, 0x73, 0x74, 0x72, 0x75,
        0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x22, 0x3A,
        0x5B, 0x31, 0x35, 0x31, 0x33, 0x32, 0x30, 0x39,
        0x34, 0x37, 0x34, 0x37, 0x39, 0x36, 0x34, 0x38,
        0x36, 0x36, 0x35, 0x36, 0x2C, 0x31, 0x34, 0x34,
        0x31, 0x31, 0x35, 0x32, 0x30, 0x31, 0x38, 0x33,
        0x33, 0x31, 0x39, 0x39, 0x32, 0x30, 0x37, 0x32,
        0x2C, 0x31, 0x35, 0x38, 0x35, 0x32, 0x36, 0x37,
        0x30, 0x36, 0x38, 0x38, 0x33, 0x34, 0x34, 0x31,
        0x34, 0x35, 0x39, 0x32, 0x2C, 0x31, 0x38, 0x37,
        0x33, 0x34, 0x39, 0x37, 0x34, 0x34, 0x34, 0x39,
        0x38, 0x36, 0x31, 0x32, 0x36, 0x33, 0x33, 0x36,
        0x5D, 0x7D,
      ])
      """
    )
  }

  func testRegexDslEmbeddingWithMultipleQuantifications() {
    let sf: SourceFileSyntax =
      """
      #regex {
        OneOrMore(.word)
        OneOrMore(.whitespace)
        OneOrMore(.word)
      }
      """
    var context = MacroExpansionContext(
      moduleName: "MyModule", fileName: "test.swift"
    )
    let transformedSF = sf.expand(macros: testMacros, in: &context)
    XCTAssertEqual(
      transformedSF.description,
//      """
//      Regex<Substring>(instructions: [
//        0x1500000000000000, // > [0] beginCapture 0
//        0x1400002008040008, // > [1] quantify builtin 1 unbounded
//        0x1400002008040007, // > [2] quantify builtin 1 unbounded
//        0x1400002008040008, // > [3] quantify builtin 1 unbounded
//        0x1600000000000000, // > [4] endCapture 0
//        0x1A00000000000000, // > [5] accept
//      ] as [UInt64])
//      """
      """
      Regex<Substring>(code: [
        0x7B, 0x22, 0x69, 0x6E, 0x73, 0x74, 0x72, 0x75,
        0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x22, 0x3A,
        0x5B, 0x31, 0x35, 0x31, 0x33, 0x32, 0x30, 0x39,
        0x34, 0x37, 0x34, 0x37, 0x39, 0x36, 0x34, 0x38,
        0x36, 0x36, 0x35, 0x36, 0x2C, 0x31, 0x34, 0x34,
        0x31, 0x31, 0x35, 0x32, 0x30, 0x31, 0x38, 0x33,
        0x33, 0x31, 0x39, 0x39, 0x32, 0x30, 0x37, 0x32,
        0x2C, 0x31, 0x34, 0x34, 0x31, 0x31, 0x35, 0x32,
        0x30, 0x31, 0x38, 0x33, 0x33, 0x31, 0x39, 0x39,
        0x32, 0x30, 0x37, 0x31, 0x2C, 0x31, 0x34, 0x34,
        0x31, 0x31, 0x35, 0x32, 0x30, 0x31, 0x38, 0x33,
        0x33, 0x31, 0x39, 0x39, 0x32, 0x30, 0x37, 0x32,
        0x2C, 0x31, 0x35, 0x38, 0x35, 0x32, 0x36, 0x37,
        0x30, 0x36, 0x38, 0x38, 0x33, 0x34, 0x34, 0x31,
        0x34, 0x35, 0x39, 0x32, 0x2C, 0x31, 0x38, 0x37,
        0x33, 0x34, 0x39, 0x37, 0x34, 0x34, 0x34, 0x39,
        0x38, 0x36, 0x31, 0x32, 0x36, 0x33, 0x33, 0x36,
        0x5D, 0x7D,
      ])
      """
    )
  }

  // TODO: add support, currently bails out
  func testRegexDslEmbeddingQuantificationOneOrMoreAny() {
    let sf: SourceFileSyntax =
      """
      #regex {
        OneOrMore(.any)
      }
      """
    var context = MacroExpansionContext(
      moduleName: "MyModule", fileName: "test.swift"
    )
    let transformedSF = sf.expand(macros: testMacros, in: &context)
    XCTAssertEqual(
      transformedSF.description,
      """
      Regex {
        OneOrMore(.any)
      }
      """
    )
  }

  func testRegexDslEmbeddingQuantificationOneOrMoreWordReluctant() {
    let sf: SourceFileSyntax =
      """
      #regex {
        OneOrMore(.word, .reluctant)
      }
      """
    var context = MacroExpansionContext(
      moduleName: "MyModule", fileName: "test.swift"
    )
    let transformedSF = sf.expand(macros: testMacros, in: &context)
    XCTAssertEqual(
      transformedSF.description,
//      """
//      Regex<Substring>(instructions: [
//        0x1500000000000000, // > [0] beginCapture 0
//        0x0A00000000000008, // > [1] matchBuiltin <word> (false)
//        0x0F00000000000001, // > [2] save #1  matchBuiltin <word> (false)
//        0x1600000000000000, // > [3] endCapture 0
//        0x1A00000000000000, // > [4] accept
//      ] as [UInt64])
//      """
      """
      Regex<Substring>(code: [
        0x7B, 0x22, 0x69, 0x6E, 0x73, 0x74, 0x72, 0x75,
        0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x22, 0x3A,
        0x5B, 0x31, 0x35, 0x31, 0x33, 0x32, 0x30, 0x39,
        0x34, 0x37, 0x34, 0x37, 0x39, 0x36, 0x34, 0x38,
        0x36, 0x36, 0x35, 0x36, 0x2C, 0x37, 0x32, 0x30,
        0x35, 0x37, 0x35, 0x39, 0x34, 0x30, 0x33, 0x37,
        0x39, 0x32, 0x37, 0x39, 0x33, 0x36, 0x38, 0x2C,
        0x31, 0x30, 0x38, 0x30, 0x38, 0x36, 0x33, 0x39,
        0x31, 0x30, 0x35, 0x36, 0x38, 0x39, 0x31, 0x39,
        0x30, 0x34, 0x31, 0x2C, 0x31, 0x35, 0x38, 0x35,
        0x32, 0x36, 0x37, 0x30, 0x36, 0x38, 0x38, 0x33,
        0x34, 0x34, 0x31, 0x34, 0x35, 0x39, 0x32, 0x2C,
        0x31, 0x38, 0x37, 0x33, 0x34, 0x39, 0x37, 0x34,
        0x34, 0x34, 0x39, 0x38, 0x36, 0x31, 0x32, 0x36,
        0x33, 0x33, 0x36, 0x5D, 0x7D,
      ])
      """
    )
  }

  func testRegexDslEmbeddingQuantificationRepeatWordFiveTimes() {
    let sf: SourceFileSyntax =
      """
      #regex {
        Repeat(.word, count: 5)
      }
      """
    var context = MacroExpansionContext(
      moduleName: "MyModule", fileName: "test.swift"
    )
    let transformedSF = sf.expand(macros: testMacros, in: &context)
    XCTAssertEqual(
      transformedSF.description,
//      """
//      Regex<Substring>(instructions: [
//        0x1500000000000000, // > [0] beginCapture 0
//        0x1400002028000008, // > [1] quantify builtin 5 0
//        0x1600000000000000, // > [2] endCapture 0
//        0x1A00000000000000, // > [3] accept
//      ] as [UInt64])
//      """
      """
      Regex<Substring>(code: [
        0x7B, 0x22, 0x69, 0x6E, 0x73, 0x74, 0x72, 0x75,
        0x63, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x22, 0x3A,
        0x5B, 0x31, 0x35, 0x31, 0x33, 0x32, 0x30, 0x39,
        0x34, 0x37, 0x34, 0x37, 0x39, 0x36, 0x34, 0x38,
        0x36, 0x36, 0x35, 0x36, 0x2C, 0x31, 0x34, 0x34,
        0x31, 0x31, 0x35, 0x32, 0x30, 0x31, 0x38, 0x38,
        0x36, 0x38, 0x36, 0x30, 0x30, 0x38, 0x34, 0x30,
        0x2C, 0x31, 0x35, 0x38, 0x35, 0x32, 0x36, 0x37,
        0x30, 0x36, 0x38, 0x38, 0x33, 0x34, 0x34, 0x31,
        0x34, 0x35, 0x39, 0x32, 0x2C, 0x31, 0x38, 0x37,
        0x33, 0x34, 0x39, 0x37, 0x34, 0x34, 0x34, 0x39,
        0x38, 0x36, 0x31, 0x32, 0x36, 0x33, 0x33, 0x36,
        0x5D, 0x7D,
      ])
      """
    )
  }
}
